@page
@model UPCI.Portal.Pages.ChangePasswordModel
@{
    ViewData["Title"] = "Change Password";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="~/lib/fontawesome-free/css/all.min.css" />
<link href="~/lib/sweetalert2/sweetalert2.css" rel="stylesheet" />

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>@ViewData["Title"]</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item text-sm">Change Password</li>
                </ol>
            </div>
        </div>
    </div>
</section>
<section class="content">
    <div class="container-fluid text-sm">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                <form id="formModal" name="formModal" action="" method="post" autocomplete="off">
                    <div class="form-group row">
                        <label for="Current" class="col-4 col-form-label">Current Password</label>
                        <div class="col-8">
                            @Html.PasswordFor(m => Model.Current, new { @class = "form-control", placeholder = "Current Password", name = "current", required = "required" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="New" class="col-4 col-form-label">New Password</label>
                        <div class="col-8">
                            @Html.PasswordFor(m => Model.New, new { @class = "form-control", placeholder = "Password", name = "new", ng_model = "password.new", required = "required", pattern = @"^(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$", title = "Password must have at least 1 uppercase letter, 1 digit, 1 special character, and be at least 8 characters long." })
                            @Html.ValidationMessageFor(m => Model.New, "", new { @class = "text-danger" }) <!-- Optional: Display validation messages -->
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Confirm" class="col-4 col-form-label">Confirm Password</label>
                        <div class="col-8">
                            @Html.PasswordFor(m => Model.Confirm, new { @class = "form-control", placeholder = "Password", name = "confirm", ng_model = "password.confirm", required = "required", pattern = @"^(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$", title = "Password must have at least 1 uppercase letter, 1 digit, 1 special character, and be at least 8 characters long." })
                            @Html.ValidationMessageFor(m => Model.Confirm, "", new { @class = "text-danger" }) <!-- Optional: Display validation messages -->
                        </div>
                    </div> 
                    <div class="form-group row">
                        <div class="col-12">
                            <button type="submit" class="btn btn-success btn-sm float-right">
                                <i class="nav-icon fas fa-check"></i> Change Password
                            </button>
                        </div>
                    </div>
                </form>
            </div>
            @* <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                <dl class="dl-horizontal">
                    <dt>Password Guidlines</dt>
                </dl>
                <ul>
                    @if (Model.SecurityParameter.PWDTYP.ToString() == "ALPHA")
                    {
                    <li>Password must have at least @Model.SecurityParameter.PWDMINLEN.ToString() alphabetic characters containing at least @Model.SecurityParameter.PWDMINUPR.ToString()  uppecase and @Model.SecurityParameter.PWDMINLOW.ToString()  lowercase letter.</li>
                    }

                    @if (Model.SecurityParameter.PWDTYP.ToString() == "NUMER")
                    {
                        <li>Password must have at least @Model.SecurityParameter.PWDMINLEN.ToString() numeric characters.</li>
                    }

                    @if (Model.SecurityParameter.PWDTYP.ToString() == "APNUM")
                    {
                <li>Password must have at least @Model.SecurityParameter.PWDMINLEN.ToString() alphanumeric characters containing at least  @Model.SecurityParameter.PWDMINUPR.ToString() uppercase letter and  @Model.SecurityParameter.PWDMINLOW.ToString() lowercase letter and  @Model.SecurityParameter.PWDMINNUM.ToString() digit</li>
                    }

                    @if (Model.SecurityParameter.PWDTYP.ToString() == "APNMS")
                    {
                    <li>Password must have at least @Model.SecurityParameter.PWDMINLEN.ToString() alphanumeric and allowed special characters  @Model.SecurityParameter.PWDSPCCHR.ToString() containing at least @Model.SecurityParameter.PWDMINUPR.ToString() uppercase letter and @Model.SecurityParameter.PWDMINLOW.ToString() lowercase letter and @Model.SecurityParameter.PWDMINSPC.ToString() special character and @Model.SecurityParameter.PWDMINNUM.ToString() digit</li>
                    } 
                     
                </ul>
            </div> *@
        </div>
    </div>
</section> 
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/lib/sweetalert2/sweetalert2.min.js"></script>
<script type="text/javascript">
    @Model.JavascriptToRun 
    function ShowPopup() {
        swal.fire(
            '@Model.SweetAlertMessage.Title',
            '@Model.SweetAlertMessage.Message',
            '@Model.SweetAlertMessage.MessageType'
        )
    }
    function PopupAndLogout() 
    {
        swal.fire({
            title: "Success!",
            text: "Password successfully changed, you will be logged out in 2 seconds.", 
            timer: 2000,
            showConfirmButton: false
        }).then((result) => {
            // Logout();
            window.location.href = appUrl;
        });
    }
</script>